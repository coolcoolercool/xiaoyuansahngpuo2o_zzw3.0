<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zzw.o2o.dao.ShopDao">

    <resultMap id="shopMap" type="com.zzw.o2o.entity.Shop">
        <id column="shop_id" property="shopId"/>
        <!-- property对应实体类中的属性名  column 对应库表中的字段名 -->
        <result column="shop_name"  property="shopName"/>
        <result column="shop_desc" property="shopDesc"/>
        <result column="shop_addr" property="shopAddr"/>
        <result column="phone" property="phone"/>
        <result column="shop_img" property="shopImg"/>
        <result column="priority" property="priority"/>
        <result column="create_time" property="createTime"/>
        <result column="last_edit_time" property="lastEditTime"/>
        <result column="enable_status" property="enableStatus"/>
        <result column="advice" property="advice"/>

        <!-- 复合对象 -->

        <!-- property对应实体类中的属性名  column 对应库表中的字段名 -->
        <association property="owner" column="owner_id"  javaType="com.zzw.o2o.entity.PersonInfo">
            <id column="user_id"  property="userId"/>
            <result  column="name" property="name"/>
        </association>

        <association property="area" column="area_id"  javaType="com.zzw.o2o.entity.Area">
            <id column="area_id" property="areaId"/>
            <result column="area_name" property="areaName"/>
        </association>

        <association property="shopCategory"  column="shop_category_id"  javaType="com.zzw.o2o.entity.ShopCategory">
            <id column="shop_category_id"  property="shopCategoryId"/>
            <result  column="shop_category_name" property="shopCategoryName"/>
        </association>

    </resultMap>


    <insert id="insertShop" useGeneratedKeys="true" keyColumn="shop_id"  keyProperty="shopId">
    /*具体的SQL*/
        INSERT INTO
		tb_shop(owner_id,area_id,shop_category_id,parent_category_id,
		shop_name,shop_desc,shop_addr,phone,shop_img,
		longitude,latitude,create_time,last_edit_time,
		enable_status,advice)
		VALUES
		(#{ownerId},#{area.areaId},#{shopCategory.shopCategoryId},#{parentCategory.shopCategoryId},
		#{shopName},#{shopDesc},#{shopAddr},#{phone},#{shopImg},
		#{longitude},#{latitude},#{createTime},#{lastEditTime},
		#{enableStatus},#{advice})
    </insert>

    <update id="updateShop" parameterType="com.zzw.o2o.entity.Shop">
        update tb_shop
        <set>/*如果不为空，就更新*/
            <if test="shopName != null">shop_name=#{shopName},</if>
            <if test="shopDesc != null">shop_desc=#{shopDesc},</if>
            <if test="shopAddr != null">shop_addr=#{shopAddr},</if>
            <if test="phone != null">phone=#{phone},</if>
            <if test="shopImg != null">shop_img=#{shopImg},</if>
            <if test="longitude != null">longitude=#{longitude},</if>
            <if test="latitude != null">latitude=#{latitude},</if>
            <if test="priority != null">priority=#{priority},</if>
            <if test="lastEditTime != null">last_edit_time=#{lastEditTime},</if>
            <if test="enableStatus != null">enable_status=#{enableStatus},</if>
            <if test="advice != null">advice=#{advice},</if>
            <if test="area != null">area_id=#{area.areaId},</if>
            <if test="shopCategory != null">shop_category_id=#{shopCategory.shopCategoryId},</if>
            <if test="parentCategory != null">parent_category_id=#{parentCategory.shopCategoryId}</if>
        </set>
        where shop_id=#{shopId}
    </update>

    <select id="queryByShopId" resultMap="shopMap" parameterType="Long">
        <!-- 具体的sql -->
        SELECT
        s.shop_id,
        /*s.owner_id,*/
        s.shop_name,
        s.shop_desc,
        s.shop_addr,
        s.phone,
        s.shop_img,
        s.longitude,
        s.latitude,
        s.priority,
        s.create_time,
        s.last_edit_time,
        s.enable_status,
        s.advice,
        a.area_id,
        a.area_name,
        sc.shop_category_id,
        sc.shop_category_name
        FROM
        tb_shop s,
        tb_area a,
        tb_shop_category sc
        WHERE
        s.area_id=a.area_id
        and
        s.shop_category_id=sc.shop_category_id
        and
        s.shop_id = #{shopId}
    </select>

    <!--因为统计的SQL和查询商铺列表的SQL中的where条件是相同的，所以这里我们使用SQL片段的方式，简化配置
    Sql中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的
    注意：如果引用其它mapper.xml的sql片段，则在引用时需要加上namespace，如下：<include refid="namespace.sql片段”/>-->
    <sql id="queryShopByCondition">
        <!-- 可输入的查询条件：
            商铺名（要求模糊查询）
            区域Id
            商铺状态
            商铺类别
            owner
        (注意在sqlmapper中按照前端入参拼装不同的查询语句) -->
        <!-- 商铺名（要求模糊查询） -->
        <if test="shopCondition.shopName != null and '' != shopCondition.shopName">
            <!--  两种写法都可以 注意第二种是 ${}传值 -->
            <!--
            #{}和${}
            #{}表示一个占位符号，通过#{}可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换，
                #{}可以有效防止sql注入。 #{}可以接收简单类型值或pojo属性值。
                 如果parameterType传输单个简单类型值，#{}括号中可以是value或其它名称。

            ${}表示拼接sql串，通过${}可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换，
                ${}可以接收简单类型值或pojo属性值，
                如果parameterType传输单个简单类型值，${}括号中只能是value。
             -->
            <!-- and s.shop_name like concat('%',#{shopCondition.shopName},'%')-->
            and s.shop_name like '%${shopCondition.shopName}%'
        </if>
        <!-- 区域Id  -->
        <if test="shopCondition.area != null and shopCondition.area.areaId != null ">
            and s.area_id = #{shopCondition.area.areaId}
        </if>
        <!-- 商铺状态  -->
        <if test="shopCondition.enableStatus !=null">
            and s.enable_status = #{shopCondition.enableStatus}
        </if>
        <!-- 商铺类别  以shop_category_id来筛选-->
        <if test="shopCondition.shopCategory != null and shopCondition.shopCategory.shopCategoryId != null ">
            and s.shop_category_id = #{shopCondition.shopCategory.shopCategoryId}
        </if>

        <!-- 选择了某个大类，列举出该大类下面的全部商店   以parent_id来筛选  -->
        <if test="shopCondition.shopCategory != null
			and shopCondition.shopCategory.parentId != null
			and shopCondition.shopCategory.parentId.shopCategoryId != null ">
            and s.shop_category_id in (
            select shop_category_id
            from  tb_shop_category
            where parent_id =  #{shopCondition.shopCategory.parentId.shopCategoryId}
            )
        </if>

        <!-- owner  -->
        <if test="shopCondition.owner != null and shopCondition.owner.userId != null">
            and s.owner_id = #{shopCondition.owner.userId}
        </if>
    </sql>

    <select id="queryShopList" resultMap="shopMap">
        SELECT
        s.shop_id,
        s.shop_name,
        s.shop_desc,
        s.shop_addr,
        s.phone,
        s.shop_img,
        s.priority,
        s.create_time,
        s.last_edit_time,
        s.enable_status,
        s.advice,
        a.area_id,
        a.area_name,
        sc.shop_category_id,
        sc.shop_category_name
        FROM
        tb_shop s,
        tb_area a,
        tb_shop_category sc
        <where>
            <include refid="queryShopByCondition"/>
        </where>
        AND s.area_id = a.area_id
        AND s.shop_category_id = sc.shop_category_id
        ORDER BY s.priority DESC
        LIMIT #{rowIndex} , #{pageSize} /*从第几行开始取，每一页有多少行*/
    </select>

    <select id="queryShopCount" resultType="Integer">
        SELECT
        count(1)
        FROM
        tb_shop s,
        tb_area a,
        tb_shop_category sc
        <where>
            <include refid="queryShopByCondition"/>
        </where>
        AND s.area_id = a.area_id
        AND s.shop_category_id = sc.shop_category_id
    </select>

    <!-- 目的：为dao接口方法提供sql语句配置 -->
    <select id="queryByEmployeeId" resultMap="shopMap"
            parameterType="Long">
        <!-- 具体的sql -->
        SELECT
        s.shop_id,
        s.shop_name,
        s.shop_desc,
        s.phone,
        s.shop_img,
        s.longitude,
        s.latitude,
        s.priority,
        s.create_time,
        s.last_edit_time,
        s.enable_status,
        s.advice,
        p.employee_id,
        p.name
        FROM
        tb_shop s
        LEFT JOIN
        tb_shop_auth_map
        p ON s.shop_id =
        p.shop_id
        WHERE
        p.employee_id =
        #{employeeId}
    </select>




</mapper>